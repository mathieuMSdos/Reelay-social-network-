generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  username               String?         @unique
  displayName            String          @default("New User")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  hasCompletedOnboarding Boolean         @default(false)
  accounts               Account[]
  Authenticator          Authenticator[]
  posts                  Post[]
  sessions               Session[]
  // User_A                 User[]          @relation("UserFollows")
  // User_B                 User[]          @relation("UserFollows")
  followedByCount        Int             @default(0)
  followingCount         Int             @default(0)
  //Les relations
  followedBy User[] @relation("UserFollows")
  following User[] @relation("UserFollows")

  @@index([username])
  @@index([displayName])
}

model Post {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(280)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  imageId   String?
  imageUrl  String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt(sort: Desc)])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
